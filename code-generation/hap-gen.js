#!/usr/bin/env node
const hap = require('hap-nodejs')
const { format } = require('prettier')
const prettierConfig = require('../prettier.config')
const { writeFileSync } = require('fs')
const { join, basename } = require('path')

const uuidToServiceMap = {}
const serviceToUuidMap = {}
const file = join(__dirname, '../src/generated/services.ts')

console.log(`Starting code generation for ${file}`)

for (const [name, service] of Object.entries(hap.Service)) {
    if (typeof service !== 'function' || typeof service.UUID !== 'string') {
        console.log(`Skipping ${typeof service} ${name}`)
        continue
    }

    uuidToServiceMap[service.UUID] = name
    serviceToUuidMap[name] = service.UUID
}

const formatting = format(
    `
// Auto-generated by "${join(basename(__dirname), basename(__filename))}", donâ€™t manually edit
export const Uuids = ${JSON.stringify(uuidToServiceMap)} as const

export const Services = ${JSON.stringify(serviceToUuidMap)} as const
`,
    { filepath: 'codegen.ts', ...prettierConfig },
)

formatting
    .then((code) => {
        writeFileSync(file, code)
        console.log(`Finished code generation for ${file}`)
    })
    .catch((err) => {
        console.error(`Could not format code: ${err.msg}`)
        process.exit(1)
    })
